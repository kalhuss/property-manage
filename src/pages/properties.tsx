import React from "react";
import prisma from "../../prisma/prisma";
import { NextPage } from "next";
import { Property } from "@prisma/client";
import DisplayCard from "../components/DisplayCard";
import Head from "next/head";
import NavBar from "../components/NavBar";
import { getSession, useSession, signOut } from "next-auth/react";
import Background from "../components/Backgrounds";
import { GetServerSideProps } from "next";
import Router from "next/router";
import { useState } from "react";


interface PropertyProps {
    properties: Property[];
}

type Session = ReturnType<typeof useSession>["data"];
type SessionNoNull = NonNullable<Session>;

type sessionProps = {
    session: Session;
};

interface Query {
    bedrooms?: string;
    bathrooms?: string;
}

const Properties: NextPage<PropertyProps> = ({ properties }) => {
    const { data: session, status } = useSession();
    
    // State variables for filters
    const [bedrooms, setBedrooms] = useState("");
    const [bathrooms, setBathrooms] = useState("");
    const [tenure, setTenure] = useState("");
    const [priceRange, setPriceRange] = useState({ min: 0, max: 1000000 });

    // Set a really high number if priceRange is empty
    const highPrice = 9999999999;

    // Filtered properties based on selected filters
    const filteredProperties = properties
        .filter((property) => {
            // Filter by bedrooms
            if (bedrooms === "4+") {
                return Number(property.bedrooms) >= 4;
            } else if (bedrooms) {
                return Number(property.bedrooms) == parseInt(bedrooms);
            }
            return true;
        })
        .filter((property) => {
            // Filter by bathrooms
            if (bathrooms === "4+") {
                return Number(property.bathrooms) >= 4;
            } else if (bathrooms) {
                return Number(property.bathrooms) == parseInt(bathrooms);
            }
            return true;
        })
        .filter((property) => {
            // Filter by tenure
            if (tenure) {
                return property.tenure == tenure;
            }
            return true;
        })
        .filter((property) => {
            // Filter by price range
            if (tenure === "to rent") {
                return (
                    property.tenure == tenure &&
                    Number(property.rent) >= (priceRange.min || 0) &&
                    Number(property.rent) <= (priceRange.max || highPrice)
                );
            } else if (tenure && tenure !== "to rent") {
                return (
                    property.tenure == tenure &&
                    Number(property.price) >= (priceRange.min || 0) &&
                    Number(property.price) <= (priceRange.max || highPrice)
                );
            }
            return true;
        });

    return (
        <div>
            <Head>
                <title>Properties</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Background />
            <NavBar isLoggedIn={!!session} />
            <div className="p-5 pt-20">
                <h1 className="text-4xl font-bold text-center mb-5">
                    Properties
                </h1>
                {/* Filter section */}
                <div className="flex flex-wrap justify-center mb-5">
                    <div className="flex flex-col items-center mr-5 mb-3">
                        <label className="font-bold mb-2">Bedrooms:</label>
                        <select
                            value={bedrooms}
                            onChange={(e) => setBedrooms(e.target.value)}
                        >
                            <option value="">All</option>
                            <option value="1">1</option>
                            <option value="2">2</option>
                            <option value="3">3</option>
                            <option value="4+">4+</option>
                        </select>
                    </div>
                    <div className="flex flex-col items-center mr-5 mb-3">
                        <label className="font-bold mb-2">Bathrooms:</label>
                        <select
                            value={bathrooms}
                            onChange={(e) => setBathrooms(e.target.value)}
                        >
                            <option value="">All</option>
                            <option value="1">1</option>
                            <option value="2">2</option>
                            <option value="3">3</option>
                            <option value="4+">4+</option>
                        </select>
                    </div>
                    <div className="flex flex-col items-center mr-5 mb-3">
                        <label className="font-bold mb-2">Tenure:</label>
                        <select
                            value={tenure}
                            onChange={(e) => setTenure(e.target.value)}
                        >
                            <option value="">All</option>
                            <option value="to rent">Rent</option>
                            <option value="for sale">Sale</option>
                            <option value="to lease">Lease</option>
                            <option value="to let">Let</option>
                        </select>
                    </div>
                    {tenure === "to rent" && (
                        <div className="flex flex-col items-center mr-5 mb-3">
                            <label className="font-bold mb-2">
                                Rent Range:
                            </label>
                            <div className="flex items-center">
                                <span className="text-black font-medium mr-2">
                                    £
                                </span>
                                <input
                                    type="number"
                                    placeholder="Min"
                                    className="border-2 border-gray-200 focus:border-gray-700 rounded-md text-center"
                                    value={priceRange.min}
                                    onChange={(e) =>
                                        setPriceRange({
                                            ...priceRange,
                                            min: parseInt(e.target.value),
                                        })
                                    }
                                />
                                <span className="mx-2">-</span>
                                <span className="text-black font-medium mr-2">
                                    £
                                </span>
                                <input
                                    type="number"
                                    placeholder="Max"
                                    className="border-2 border-gray-200 focus:border-gray-700 rounded-md text-center"
                                    value={priceRange.max}
                                    onChange={(e) =>
                                        setPriceRange({
                                            ...priceRange,
                                            max: parseInt(e.target.value),
                                        })
                                    }
                                />
                            </div>
                        </div>
                    )}
                    {tenure && tenure !== "to rent" && (
                        <div className="flex flex-col items-center mr-5 mb-3">
                            <label className="font-bold mb-2">
                                Price Range:
                            </label>
                            <div className="flex items-center">
                                <span className="text-black font-medium mr-2">
                                    £
                                </span>
                                <input
                                    type="number"
                                    placeholder="Min"
                                    className="border-2 border-gray-200 focus:border-gray-700 rounded-md text-center"
                                    value={priceRange.min}
                                    onChange={(e) =>
                                        setPriceRange({
                                            ...priceRange,
                                            min: parseInt(e.target.value),
                                        })
                                    }
                                />
                                <span className="mx-2">-</span>
                                <span className="text-gray-700 font-medium mr-2">
                                    £
                                </span>
                                <input
                                    type="number"
                                    placeholder="Max"
                                    className="border-2 border-gray-200 focus:border-gray-700 rounded-md text-center"
                                    value={priceRange.max}
                                    onChange={(e) =>
                                        setPriceRange({
                                            ...priceRange,
                                            max: parseInt(e.target.value),
                                        })
                                    }
                                />
                            </div>
                        </div>
                    )}
                </div>
                <DisplayCard properties={filteredProperties} />
                </div>
            </div>

        
    );
};

export async function getServerSideProps() {
    const properties = await prisma.property.findMany();
    return {
        props: { properties: JSON.parse(JSON.stringify(properties)) },
    };
}

export default Properties;
