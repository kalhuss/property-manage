import { useSession, getSession } from "next-auth/react";
import NavBar from "../../components/NavBar";
import Head from "next/head";
import { NextPage } from "next";
import Link from "next/link";
import { GetServerSideProps } from "next";
import prisma from "../../../prisma/prisma";
import Background from "@/components/Backgrounds";
import { useRouter } from "next/router";

// Success page
const SuccessPage: NextPage = () => {
    const { data: session } = useSession();
    const router = useRouter();
    const { id } = router.query;

    // Call the updatePaid API
    if (session) {
        fetch("/api/updatePaid", {
            method: "POST",
            body: JSON.stringify({
                id: id,
            }),
        });

        fetch("/api/payout", {
            method: "POST",
            body: JSON.stringify({ id }),
        });
    }

    // Render the success page
    return (
        <>
            <Head>
                <title>Success</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Background />
            <NavBar isLoggedIn={!!session} />
            <div className="container mx-auto p-5 pt-20 flex flex-col">
                <h1 className="text-4xl font-bold text-center mb-5">
                    Payment Successful!
                </h1>
                <p className="text-center text-lg">
                    Thank you for your payment
                </p>
                <Link href="/" className="flex justify-center">
                    <button className="justify-center px-8 py-3 mt-44 bg-white bg-opacity-75 text-blue-500 font-bold text-3xl rounded-md hover:shadow-lg  hover:bg-blue-500 hover:text-white border-2 border-blue-500">
                        Back to Home
                    </button>
                </Link>
            </div>
        </>
    );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
    const session = await getSession(context);
    const email = session?.user?.email;

    // Get the contract ID from the URL query string
    const { id } = context.query;

    // Get the user from the database
    const user = await prisma.user.findFirst({
        where: {
            email: email as string,
        },
    });

    // Get the contract from the database
    const contract = await prisma.contract.findUnique({
        where: {
            id: id as string,
        },
    });

    // Check if the contract exists and if the logged-in user's email matches the email associated with the contract
    // if (!contract || contract.userId !== user?.id) {
    //     return {
    //         redirect: {
    //             destination: "/",
    //             permanent: false,
    //         },
    //     };
    // }

    return {
        props: {
            user: JSON.parse(JSON.stringify(user)),
        },
    };
};

export default SuccessPage;
