// import { useSession, getSession } from 'next-auth/react';
// import NavBar from "../components/NavBar";
// import Head from "next/head";
// import Image from "next/image";
// import { NextPage } from "next";
// import Link from "next/link";
// import { GetServerSideProps } from "next";
// import prisma from "../../prisma/prisma";
// import { User } from "@prisma/client";
// import { useState } from "react";
// import Background from '@/components/Backgrounds';

// type Session = ReturnType<typeof useSession>["data"];
// type SessionNoNull = NonNullable<Session>;

// type sessionProps = {
//     session: Session;
// };

// interface UserProps {
//     user: User;
// }

// const Profile: NextPage<UserProps> = ({ user }) => {
//     const { data: session, status } = useSession();
//     const [isEditing, setIsEditing] = useState(false);
//     const [name, setName] = useState(user.name);
//     const [surname, setSurname] = useState(user.surname);
//     const [dob, setDob] = useState(user.dob);
//     const [email, setEmail] = useState(user.email);
//     const [phoneNumber, setPhoneNumber] = useState(user.phoneNumber);

//     const handleEdit = () => {
//         setIsEditing(true);
//     };

//     const handleCancel = () => {
//         setIsEditing(false);
//         setName(user.name);
//         setSurname(user.surname);
//         setDob(user.dob);
//         setEmail(user.email);
//         setPhoneNumber(user.phoneNumber);
//     };

//     const handleSubmit = async () => {
//         try {
//             const response = await fetch('/api/updateProfile', {
//                 method: 'POST',
//                 body: JSON.stringify({
//                     name,
//                     surname,
//                     dob,
//                     email,
//                     phoneNumber,
//                 }),
//                 headers: {
//                     'Content-Type': 'application/json',
//                 },
//             });

//             if (response.ok) {
//                 setIsEditing(false);
//             } else {
//                 console.log('Failed to update profile');
//             }
//         } catch (error) {
//             console.log(error);
//         }
//     };

//     console.log(session)
//     return (
//         <div>
//             <Head>
//                 <title>Properties</title>
//                 <meta
//                     name="description"
//                     content="Generated by create next app"
//                 />
//                 <link rel="icon" href="/favicon.ico" />
//             </Head>

//             <NavBar isLoggedIn={!!session} />

//             <Image
//                 src="/assets/interiorprofile.jpg"
//                 alt="Interior Design"
//                 width="0"
//                 height="0"
//                 sizes="100vw"
//                 className="w-full h-screen absolute -z-10"
//             />
//             <div className="relative pt-20">
//                 <div className='pt-20 w-full flex justify-center'>
//                     {/* If session then show user */}
//                     {session ? (
//                         <>
//                             <UserDisplay user={user} />
//                         </>
//                     ) : (
//                         <Guest />
//                     )}
//                 </div>
//             </div>
//         </div>
//     );
// };

// const UserDisplay: NextPage<UserProps> = ({ user }) => {
//     const [isEditing, setIsEditing] = useState(false);
//     const [name, setName] = useState(user.name);
//     const [surname, setSurname] = useState(user.surname);

//     const handleCancel = () => {
//       setIsEditing(false);
//       setName(user.name);
//       setSurname(user.surname);
//     };

//     const handleSave = async () => {
//       const response = fetch("/api/updateProfile", {
//         method: "POST",
//         body: JSON.stringify({
//             name,
//             surname,
//         }),
//     });
//       setIsEditing(false);
//     };

//     return (
//       <>
//         <div className="p-10 w-3/6 bg-white rounded-lg shadow-lg flex flex-col items-center justify-center">
//           <h1 className="text-3xl font-bold text-black pb-5">Profile</h1>
//           {isEditing ? (
//             <>
//               <div className="flex flex-col items-left justify-center pb-5">
//                 <input
//                   type="text"
//                   value={name}
//                   onChange={(e) => setName(e.target.value)}
//                   className="rounded-md border-gray-400 border-2 p-2 m-2"
//                 />
//                 <input
//                   type="text"
//                   value={surname}
//                   onChange={(e) => setSurname(e.target.value)}
//                   className="rounded-md border-gray-400 border-2 p-2 m-2"
//                 />
//               </div>
//               <div className="flex items-center justify-center space-x-5">
//                 <button
//                   onClick={handleSave}
//                   className="py-2 px-4 bg-green-500 text-white rounded-md hover:bg-green-600"
//                 >
//                   Save
//                 </button>
//                 <button
//                   onClick={handleCancel}
//                   className="py-2 px-4 bg-red-500 text-white rounded-md hover:bg-red-600"
//                 >
//                   Cancel
//                 </button>
//               </div>
//             </>
//           ) : (
//             <>
//               <div className="flex flex-col items-left justify-center pb-5">
//                 <div className="flex items-center justify-center space-x-2">
//                   <h1 className="text-2xl font-bold text-black">Name:</h1>
//                   <p className="text-2xl text-gray-500">{name}</p>
//                 </div>
//                 <div className="flex items-center justify-center space-x-2">
//                   <h1 className="text-2xl font-bold text-black">Surname:</h1>
//                   <p className="text-2xl text-gray-500">{surname}</p>
//                 </div>
//               </div>
//               <button
//                 onClick={() => setIsEditing(true)}
//                 className="py-2 px-4 bg-blue-500 text-white rounded-md hover:bg-blue-600"
//               >
//                 Edit
//               </button>
//             </>
//           )}
//         </div>
//       </>
//     );
//   };

// const Guest: NextPage = () => {
//     return (
//         <>
//             <div className="absolute top-52 left-0 w-full h-1/2 flex m-50 items-center justify-center z-0">
//                 <h1 className="absolute top-28 text-center font-bold text-black text-5xl">
//                     Log in to see your profile
//                 </h1>
//                 <Link href="/login">
//                     <button className="px-8 py-3 mt-44 bg-white bg-opacity-75 text-blue-500 font-bold text-3xl rounded-md hover:shadow-lg hover:bg-transparent hover:border-white hover:text-white border-2 border-blue-500">
//                         Login
//                     </button>
//                 </Link>
//             </div>
//         </>
//     );
// };

// export const getServerSideProps: GetServerSideProps<{}> = async (context) => {
//     const session = await getSession(context);
//     const email = session?.user?.email;

//     const user = await prisma.user.findFirst({
//         where: {
//             email: email as string,
//         },
//     });

//     context.res.setHeader('Cache-Control', 'no-store');

//     return {
//         props: {
//             user: JSON.parse(JSON.stringify(user)),
//         },
//     };
// };

// export default Profile;

import { useSession, getSession } from "next-auth/react";
import NavBar from "../components/NavBar";
import Head from "next/head";
import Image from "next/image";
import { NextPage } from "next";
import Link from "next/link";
import { GetServerSideProps } from "next";
import prisma from "../../prisma/prisma";
import { User } from "@prisma/client";
import { useState } from "react";
import Background from "@/components/Backgrounds";
import Router from "next/router";

type Session = ReturnType<typeof useSession>["data"];
type SessionNoNull = NonNullable<Session>;

type sessionProps = {
    session: Session;
};

interface UserProps {
    user: User;
}

const Profile: NextPage<UserProps> = ({ user }) => {
    const { data: session, status } = useSession();
    const [isEditing, setIsEditing] = useState(false);
    const [name, setName] = useState(user.name);
    const [surname, setSurname] = useState(user.surname);
    const [dob, setDob] = useState(user.dob);
    const [email, setEmail] = useState(user.email);
    const [phoneNumber, setPhoneNumber] = useState(user.phoneNumber);

    const handleEdit = () => {
        setIsEditing(true);
    };

    const handleCancel = () => {
        setIsEditing(false);
        setName(user.name);
        setSurname(user.surname);
        setDob(user.dob);
        setEmail(user.email);
        setPhoneNumber(user.phoneNumber);
    };

    const handleSubmit = async () => {
        console.log(user.id);
        try {
            const response = await fetch("/api/updateProfile", {
                method: "POST",
                body: JSON.stringify({
                    userId: user.id,
                    name,
                    surname,
                    dob,
                    email,
                    phoneNumber,
                }),
            });

            if (response.ok) {
                setIsEditing(false);
                Router.reload();
            } else {
                console.log("Failed to update profile");
            }
        } catch (error) {
            console.log(error);
        }
    };

    console.log(session);
    return (
        <div>
            <Head>
                <title>Properties</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <NavBar isLoggedIn={!!session} />

            <Image
                src="/assets/interiorprofile.jpg"
                alt="Interior Design"
                width="0"
                height="0"
                sizes="100vw"
                className="w-full h-screen absolute -z-10"
            />
            <div className="relative pt-20">
                <div className="pt-20 w-full flex justify-center">
                    {/* If session then show user */}
                    {session ? (
                        <>
                            {!isEditing ? (
                                <UserDisplay
                                    user={user}
                                    handleEdit={handleEdit}
                                />
                            ) : (
                                <EditUser
                                    name={name}
                                    surname={surname}
                                    dob={dob}
                                    email={email}
                                    phoneNumber={phoneNumber}
                                    setName={setName}
                                    setSurname={setSurname}
                                    setDob={setDob}
                                    setEmail={setEmail}
                                    setPhoneNumber={setPhoneNumber}
                                    handleSubmit={handleSubmit}
                                    handleCancel={handleCancel}
                                />
                            )}
                        </>
                    ) : (
                        <Guest />
                    )}
                </div>
            </div>
        </div>
    );
};

// Authorised User
const UserDisplay: NextPage<{ user: User; handleEdit: () => void }> = ({
    user,
    handleEdit,
}) => {
    return (
        <>
            <div className="flex flex-col items-center justify-center space-y-4 bg-white p-5 rounded-md shadow-md">
                <div className="flex flex-col items-center justify-center space-y-4">
                    <div className="flex items-center justify-center space-x-2">
                        <h1 className="text-2xl font-bold text-black">Name:</h1>
                        <p className="text-2xl text-black">{user.name}</p>
                    </div>
                    <div className="flex items-center justify-center space-x-2">
                        <h1 className="text-2xl font-bold text-black">
                            Surname:
                        </h1>
                        <p className="text-2xl text-black">{user.surname}</p>
                    </div>
                    <div className="flex items-center justify-center space-x-2">
                        <h1 className="text-2xl font-bold text-black">
                            Date of Birth:
                        </h1>
                        <p className="text-2xl text-black">{user.dob}</p>
                    </div>
                    <div className="flex items-center justify-center space-x-2">
                        <h1 className="text-2xl font-bold text-black">
                            Email:
                        </h1>
                        <p className="text-2xl text-black">{user.email}</p>
                    </div>
                    <div className="flex items-center justify-center space-x-2">
                        <h1 className="text-2xl font-bold text-black">
                            Phone Number:
                        </h1>
                        <p className="text-2xl text-black">
                            {user.phoneNumber}
                        </p>
                    </div>
                </div>
                <button
                    className="p-4 font-bold border-blue-500 border-2 text-blue-500 hover:border-white hover:text-white hover:bg-blue-500 rounded-lg"
                    onClick={handleEdit}
                >
                    Edit
                </button>
            </div>
        </>
    );
};

// edit user
const EditUser: NextPage<{
    // CREATE the edit user
    name: string;
    surname: string;
    dob: string;
    email: string;
    phoneNumber: string;
    setName: (name: string) => void;
    setSurname: (surname: string) => void;
    setDob: (dob: string) => void;
    setEmail: (email: string) => void;
    setPhoneNumber: (phoneNumber: string) => void;
    handleSubmit: () => void;
    handleCancel: () => void;
}> = ({
    // CREATE the edit user
    name,
    surname,
    dob,
    email,
    phoneNumber,
    setName,
    setSurname,
    setDob,
    setEmail,
    setPhoneNumber,
    handleSubmit,
    handleCancel,
}) => {
    // CREATE the edit user
    return (
        <>
            <div className="flex flex-col justify-center items-center bg-gray-100">
                <div className="bg-white rounded-lg shadow-lg p-8 flex flex-col flex-space gap-4">
                    <div className="grid grid-cols-2 items-center">
                        <h1 className="text-2xl font-bold text-black mr-4">
                            Name:
                        </h1>
                        <input
                            className="w-full px-4 py-2 text-2xl text-gray-500 bg-white border-2 border-gray-500 rounded-md"
                            value={name}
                            onChange={(e) => setName(e.target.value)}
                        />
                    </div>
                    <div className="grid grid-cols-2 items-center">
                        <h1 className="text-2xl font-bold text-black mr-4">
                            Surname:
                        </h1>
                        <input
                            className="w-full px-4 py-2 text-2xl text-gray-500 bg-white border-2 border-gray-500 rounded-md"
                            value={surname}
                            onChange={(e) => setSurname(e.target.value)}
                        />
                    </div>
                    <div className="grid grid-cols-2 items-center">
                        <h1 className="text-2xl font-bold text-black mr-4">
                            DOB:
                        </h1>
                        <input
                            className="w-full px-4 py-2 text-2xl text-gray-500 bg-white border-2 border-gray-500 rounded-md"
                            value={dob}
                            type="date"
                            onChange={(e) => setDob(e.target.value)}
                        />
                    </div>
                    <div className="grid grid-cols-2 items-center">
                        <h1 className="text-2xl font-bold text-black mr-4">
                            Email:
                        </h1>
                        <input
                            className="w-full px-4 py-2 text-2xl text-gray-500 bg-white border-2 border-gray-500 rounded-md"
                            value={email}
                            onChange={(e) => setEmail(e.target.value)}
                        />
                    </div>
                    <div className="grid grid-cols-2 items-center">
                        <h1 className="text-2xl font-bold text-black mr-4">
                            Phone:
                        </h1>
                        <input
                            className="w-full px-4 py-2 text-2xl text-gray-500 bg-white border-2 border-gray-500 rounded-md"
                            value={phoneNumber}
                            onChange={(e) => setPhoneNumber(e.target.value)}
                        />
                    </div>
                    <div className="grid grid-cols-2 gap-1">
                        <button onClick={handleSubmit} className="p-4 w-full font-bold border-green-500 border-2 text-green-500 hover:border-white hover:text-white hover:bg-green-500 rounded-lg">
                            SUBMIT
                        </button>
                        <button onClick={handleCancel} className="p-4 w-full font-bold border-red-500 border-2 text-red-500 hover:border-white hover:text-white hover:bg-red-500 rounded-lg">
                            CANCEL
                        </button>
                    </div>
                </div>
            </div>
        </>
    );
};

const Guest: NextPage = () => {
    return (
        <>
            <div className="absolute top-52 left-0 w-full h-1/2 flex m-50 items-center justify-center z-0">
                <h1 className="absolute top-28 text-center font-bold text-black text-5xl">
                    Log in to see your profile
                </h1>
                <Link href="/login">
                    <button className="px-8 py-3 mt-44 bg-white bg-opacity-75 text-blue-500 font-bold text-3xl rounded-md hover:shadow-lg hover:bg-transparent hover:border-white hover:text-white border-2 border-blue-500">
                        Login
                    </button>
                </Link>
            </div>
        </>
    );
};

export const getServerSideProps: GetServerSideProps<{}> = async (context) => {
    const session = await getSession(context);
    const email = session?.user?.email;

    const user = await prisma.user.findFirst({
        where: {
            email: email as string,
        },
    });

    context.res.setHeader("Cache-Control", "no-store");

    return {
        props: {
            user: JSON.parse(JSON.stringify(user)),
        },
    };
};

export default Profile;
