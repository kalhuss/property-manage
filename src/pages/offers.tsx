import { useSession, getSession } from "next-auth/react";
import NavBar from "../components/NavBar";
import Head from "next/head";
import { NextPage } from "next";
import Link from "next/link";
import { GetServerSideProps } from "next";
import prisma from "../../prisma/prisma";
import { User } from "@prisma/client";
import { useState } from "react";
import Background from "@/components/Backgrounds";
import { Offer } from "@prisma/client";
import { Property } from "@prisma/client";
import BackArrow from "@/components/BackArrow";
import { Contract } from "@prisma/client";
import { useEffect } from "react";

type Session = ReturnType<typeof useSession>["data"];
type SessionNoNull = NonNullable<Session>;

interface OffersPageProps {
    user: User;
    offers: Offer[];
    properties: Property[];
    contracts: Contract[];
}

const Offers: NextPage<OffersPageProps> = ({
    user,
    offers,
    properties,
    contracts,
}) => {
    const { data: session, status } = useSession();
    const CDN =
        "https://zqmbrfgddurttslljblz.supabase.co/storage/v1/object/public/property-images/";
    const [contractUrl, setContractUrl] = useState<Contract | null>(null);
    console.log(contractUrl);

    function handleContract(propertyId: string) {
        const contract = contracts.find(
            (contract) => contract.propertyId === propertyId
        );
        if (contract) {
            setContractUrl(contract);
        }
        return contract?.id;
    }

    function handlePayment(amount: number, propertyId: string) {
        fetch("/api/payment", {
            method: "POST",
            body: JSON.stringify({
                amount: amount * 100,
                currency: "gbp",
                userId: user.id,
                contractId: handleContract(propertyId),
            }),
        })
            .then((response) => {
                if (response.ok) {
                    return response.json();
                }
                throw new Error("Network response was not ok.");
            })
            .then((data) => {
                console.log(data);
                window.location.href = data.url;
            })
            .catch((error) => {
                console.error("Error:", error);
            });
    }

    return (
        <>
            <Head>
                <title>Offers</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Background />
            <NavBar isLoggedIn={!!session} />
            <div className="container mx-auto p-5 pt-20">
                <h1 className="text-4xl font-bold text-center mb-5">Offers</h1>
                <BackArrow label="Back" />
                <div className="flex flex-wrap justify-around max-w-4xl mt-6 sm:w-full">
                    {properties.map((property) => (
                        <div className="p-6 mt-6 text-left border w-96 rounded-xl bg-white">
                            <h3 className="text-2xl font-bold">
                                {property.address}
                            </h3>
                            {offers
                                .filter(
                                    (offer) => offer.propertyId === property.id
                                )
                                .map((offer) => {
                                    const contract = contracts.find(
                                        (contract) =>
                                            contract.propertyId === property.id
                                    );
                                    return (
                                        <div
                                            className="flex flex-col"
                                            key={offer.id}
                                        >
                                            <p className="mt-4 text-xl">
                                                Offer price: {offer.amount}
                                            </p>
                                            <p className="mt-4 text-xl">
                                                Offer status:{" "}
                                                {offer.offerStatus}
                                            </p>
                                            {offer.offerStatus === "Accepted" &&
                                                !offer.signed && (
                                                    <Link
                                                        href={`/contracts/${property.id}`}
                                                    >
                                                        <div
                                                            onClick={() => {
                                                                // TODO: handle click on contract button
                                                            }}
                                                            className="px-4 py-2 mt-4 text-white bg-blue-500 rounded hover:bg-blue-600 focus:bg-blue-600"
                                                        >
                                                            View Contract
                                                        </div>
                                                    </Link>
                                                )}
                                            {offer.signed && (
                                                <>
                                                    <Link
                                                        href={
                                                            CDN +
                                                            contract?.contractPDF
                                                        }
                                                    >
                                                        <div className="px-4 py-2 mt-4 text-center text-white bg-blue-500 rounded hover:bg-blue-600 focus:bg-blue-600">
                                                            Download Contract
                                                        </div>
                                                    </Link>
                                                    {!contract?.paid ? (
                                                        <button
                                                            onClick={() =>
                                                                handlePayment(
                                                                    Number(
                                                                        offer.amount
                                                                    ),
                                                                    property.id
                                                                )
                                                            }
                                                            className="px-4 py-2 mt-4 text-center text-white bg-green-500 rounded hover:bg-green-600 focus:bg-green-600"
                                                        >
                                                            Pay
                                                        </button>
                                                    ) : (
                                                        <p className="mt-4 text-xl">
                                                            Paid
                                                        </p>
                                                    )}
                                                </>
                                            )}
                                        </div>
                                    );
                                })}
                        </div>
                    ))}
                </div>
            </div>
        </>
    );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
    const session = await getSession(context);
    const email = session?.user?.email;

    const user = await prisma.user.findFirst({
        where: {
            email: email as string,
        },
    });

    const offers = await prisma.offer.findMany({
        where: {
            userId: user?.id,
        },
    });

    const properties = await prisma.property.findMany({
        where: {
            offers: {
                some: {
                    userId: user?.id,
                },
            },
        },
    });

    // Get the contracts
    const contracts = await prisma.contract.findMany({
        where: {
            userId: user?.id,
        },
    });

    return {
        props: {
            offers: JSON.parse(JSON.stringify(offers)),
            user: JSON.parse(JSON.stringify(user)),
            properties: JSON.parse(JSON.stringify(properties)),
            contracts: JSON.parse(JSON.stringify(contracts)),
        },
    };
};

export default Offers;
