import { useSession, getSession } from "next-auth/react";
import NavBar from "../components/NavBar";
import Head from "next/head";
import Image from "next/image";
import { NextPage } from "next";
import Link from "next/link";
import { GetServerSideProps } from "next";
import prisma from "../../prisma/prisma";
import { User } from "@prisma/client";
import { useState } from "react";
import Background from "@/components/Backgrounds";
import { Offer } from "@prisma/client";
import { Property } from "@prisma/client";
import BackArrow from "@/components/BackArrow";

type Session = ReturnType<typeof useSession>["data"];
type SessionNoNull = NonNullable<Session>;

interface OffersPageProps {
    user: User;
    offers: Offer[];
    properties: Property[];
}

const Offers: NextPage<OffersPageProps> = ({ user, offers, properties }) => {
    const { data: session, status } = useSession();

    return (
        <>
            <Head>
                <title>Offers</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Background />
            <NavBar isLoggedIn={!!session} />
            <div className="container mx-auto p-5 pt-20">
                <h1 className="text-4xl font-bold text-center mb-5">Offers</h1>
                <BackArrow label="Back" />
                <div className="flex flex-wrap justify-around max-w-4xl mt-6 sm:w-full">
                    {properties.map((property) => (
                        <div className="p-6 mt-6 text-left border w-96 rounded-xl bg-white hover:text-blue-600 focus:text-blue-600">
                            <Link href={`/properties/${property.propertyID}`}>
                                <h3 className="text-2xl font-bold">
                                    {property.address}
                                </h3>
                            </Link>
                            {offers
                                .filter(
                                    (offer) => offer.propertyId === property.id
                                )
                                .map((offer) => (
                                    <div
                                        className="flex flex-col"
                                        key={offer.id}
                                    >
                                        <p className="mt-4 text-xl">
                                            {offer.amount}
                                        </p>
                                        {offer.offerStatus === "Accepted" && (
                                            <Link href={`/contracts/${property.id}`}>
                                                <div
                                                    onClick={() => {
                                                        // TODO: handle click on contract button
                                                    }}
                                                    className="px-4 py-2 mt-4 text-white bg-blue-500 rounded hover:bg-blue-600 focus:bg-blue-600"
                                                >
                                                    View Contract
                                                </div>
                                            </Link>
                                        )}
                                        <p className="mt-4 text-xl">
                                            {offer.status}
                                        </p>
                                    </div>
                                ))}
                        </div>
                    ))}
                </div>
            </div>
        </>
    );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
    const session = await getSession(context);
    const email = session?.user?.email;

    const user = await prisma.user.findFirst({
        where: {
            email: email as string,
        },
    });

    const offers = await prisma.offer.findMany({
        where: {
            userId: user?.id,
        },
    });

    const properties = await prisma.property.findMany({
        where: {
            offers: {
                some: {
                    userId: user?.id,
                },
            },
        },
    });

    return {
        props: {
            offers: JSON.parse(JSON.stringify(offers)),
            user: JSON.parse(JSON.stringify(user)),
            properties: JSON.parse(JSON.stringify(properties)),
        },
    };
};

export default Offers;
